From 9815c09f98a426827217561ff524b403fb2603bf Mon Sep 17 00:00:00 2001
From: Chris Adams <chris.adams@jollamobile.com>
Date: Thu, 2 Apr 2020 14:30:48 +1000
Subject: [PATCH 7/8] Support OneDrive oauth2 flow

OneDrive supports a slightly non-standard USER_AGENT flow where
a bearer code may be exchanged for a token.

Also, support using a dynamically determined redirect uri for
the authorization code request.
---
 src/base-plugin.cpp  |  5 ++++
 src/oauth2plugin.cpp | 67 +++++++++++++++++++++++++++-----------------
 2 files changed, 47 insertions(+), 25 deletions(-)

diff --git a/src/base-plugin.cpp b/src/base-plugin.cpp
index fcb2b63..b9e4339 100644
--- a/src/base-plugin.cpp
+++ b/src/base-plugin.cpp
@@ -167,6 +167,11 @@ bool BasePlugin::handleNetworkError(QNetworkReply::NetworkError err)
     Q_D(BasePlugin);
 
     TRACE() << "error signal received:" << err;
+    if (d->m_reply) {
+        TRACE() << "error message:" << d->m_reply->errorString();
+        TRACE() << "error data:" << d->m_reply->readAll();
+    }
+
     /* Has been handled by handleSslErrors already */
     if (err == QNetworkReply::SslHandshakeFailedError) {
         return true;
diff --git a/src/oauth2plugin.cpp b/src/oauth2plugin.cpp
index 14445d5..28033ca 100644
--- a/src/oauth2plugin.cpp
+++ b/src/oauth2plugin.cpp
@@ -350,7 +350,11 @@ void OAuth2Plugin::userActionFinished(const SignOn::UiSessionData &data)
         return;
     }
 
-    TRACE() << data.UrlResponse();
+    const QString redirectUri = data.getProperty(QLatin1String("RedirectUri")).toString().isEmpty()
+                              ? d->m_oauth2Data.RedirectUri()
+                              : data.getProperty(QLatin1String("RedirectUri")).toString();
+
+    TRACE() << "OAuth2Plugin:userActionFinished: got:" << data.UrlResponse() << redirectUri;
 
     // Checking if authorization server granted access
     QUrl url = QUrl(data.UrlResponse());
@@ -361,34 +365,46 @@ void OAuth2Plugin::userActionFinished(const SignOn::UiSessionData &data)
     }
 
     if (d->m_mechanism == USER_AGENT) {
-        // Response should contain the access token
-        OAuth2PluginTokenData respData;
-        QString fragment;
-        if (url.hasFragment()) {
-            fragment = url.fragment();
-            QStringList list = fragment.split(QRegExp("&|="), QString::SkipEmptyParts);
-            for (int i = 1; i < list.count(); i += 2) {
-                if (list.at(i - 1) == ACCESS_TOKEN) {
-                    respData.setAccessToken(list.at(i));
-                }
-                else if (list.at(i - 1) == EXPIRES_IN) {
-                    respData.setExpiresIn(QString(list.at(i)).toInt());
+        // some providers (e.g. OneDrive) implement non-standard OAuth2 flows
+        // and return auth code requiring exchange for token.
+        if (url.hasQueryItem(AUTH_CODE)) {
+            QString code = url.queryItemValue(AUTH_CODE);
+            QUrl newUrl;
+            newUrl.addQueryItem(GRANT_TYPE, AUTHORIZATION_CODE);
+            newUrl.addQueryItem(AUTH_CODE, code);
+            newUrl.addQueryItem(REDIRECT_URI, redirectUri);
+            TRACE() << "USER_AGENT flow got auth code query item, sending auth code request:" << newUrl.toString();
+            sendOAuth2PostRequest(newUrl,
+                                  GrantType::AuthorizationCode);
+        } else {
+            // Response should contain the access token
+            OAuth2PluginTokenData respData;
+            QString fragment;
+            if (url.hasFragment()) {
+                fragment = url.fragment();
+                QStringList list = fragment.split(QRegExp("&|="), QString::SkipEmptyParts);
+                for (int i = 1; i < list.count(); i += 2) {
+                    if (list.at(i - 1) == ACCESS_TOKEN) {
+                        respData.setAccessToken(list.at(i));
+                    }
+                    else if (list.at(i - 1) == EXPIRES_IN) {
+                        respData.setExpiresIn(QString(list.at(i)).toInt());
+                    }
+                    else if (list.at(i - 1) == REFRESH_TOKEN) {
+                        respData.setRefreshToken(list.at(i));
+                    }
                 }
-                else if (list.at(i - 1) == REFRESH_TOKEN) {
-                    respData.setRefreshToken(list.at(i));
+                if (respData.AccessToken().isEmpty()) {
+                    emit error(Error(Error::NotAuthorized, QString("Access token not present")));
+                } else {
+                    storeResponse(respData);
+
+                    emit result(respData);
                 }
-            }
-            if (respData.AccessToken().isEmpty()) {
-                emit error(Error(Error::NotAuthorized, QString("Access token not present")));
             } else {
-                storeResponse(respData);
-
-                emit result(respData);
+                emit error(Error(Error::NotAuthorized, QString("Access token not present")));
             }
         }
-        else {
-            emit error(Error(Error::NotAuthorized, QString("Access token not present")));
-        }
     } else if (d->m_mechanism == WEB_SERVER) {
         // Access grant can be one of the floolwing types
         // 1. Authorization code (code, redirect_uri)
@@ -400,7 +416,8 @@ void OAuth2Plugin::userActionFinished(const SignOn::UiSessionData &data)
             QString code = url.queryItemValue(AUTH_CODE);
             newUrl.addQueryItem(GRANT_TYPE, AUTHORIZATION_CODE);
             newUrl.addQueryItem(AUTH_CODE, code);
-            newUrl.addQueryItem(REDIRECT_URI, d->m_oauth2Data.RedirectUri());
+            newUrl.addQueryItem(REDIRECT_URI, redirectUri);
+            TRACE() << "WEB_SERVER flow got auth code query item, sending auth code request:" << newUrl.toString();
             sendOAuth2PostRequest(newUrl,
                                   GrantType::AuthorizationCode);
         }
-- 
2.17.1

