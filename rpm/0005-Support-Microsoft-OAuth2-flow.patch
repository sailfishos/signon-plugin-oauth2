From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Chris Adams <chris.adams@jollamobile.com>
Date: Thu, 2 Apr 2020 14:30:48 +1000
Subject: [PATCH] Support Microsoft OAuth2 flow

Microsoft accounts may use a slightly non-standard USER_AGENT flow where
a bearer code may be exchanged for a token.

Also, support using a dynamically determined redirect uri for
the authorization code request.
---
 src/oauth2plugin.cpp | 101 ++++++++++++++++++++++++++-----------------
 1 file changed, 61 insertions(+), 40 deletions(-)

diff --git a/src/oauth2plugin.cpp b/src/oauth2plugin.cpp
index 3eb3fef7a7bf2de0b2943d61300267f44907cc03..af3ca32b135ae00e4683d14b26a013a8c6011807 100644
--- a/src/oauth2plugin.cpp
+++ b/src/oauth2plugin.cpp
@@ -395,7 +395,11 @@ void OAuth2Plugin::userActionFinished(const SignOn::UiSessionData &data)
 
     if (handleUiErrors(data)) return;
 
-    TRACE() << data.UrlResponse();
+    const QString redirectUri = data.getProperty(QLatin1String("RedirectUri")).toString().isEmpty()
+                              ? d->m_oauth2Data.RedirectUri()
+                              : data.getProperty(QLatin1String("RedirectUri")).toString();
+
+    TRACE() << "OAuth2Plugin:userActionFinished: got:" << data.UrlResponse() << redirectUri;
 
     // Checking if authorization server granted access
     QUrl url = QUrl(data.UrlResponse());
@@ -406,50 +410,66 @@ void OAuth2Plugin::userActionFinished(const SignOn::UiSessionData &data)
     }
 
     if (d->m_mechanism == USER_AGENT) {
-        // Response should contain the access token
-        OAuth2PluginTokenData respData;
-        if (url.hasFragment()) {
-            QString state;
-            respData.setScope(d->m_oauth2Data.Scope());
-            QUrlQuery fragment(url.fragment());
-            QVariantMap extraFields;
-            typedef QPair<QString, QString> StringPair;
-            Q_FOREACH(const StringPair &pair, fragment.queryItems()) {
-                if (pair.first == ACCESS_TOKEN) {
-                    respData.setAccessToken(pair.second);
-                } else if (pair.first == ID_TOKEN) {
-                    respData.setIdToken(pair.second);
-                } else if (pair.first == EXPIRES_IN) {
-                    respData.setExpiresIn(pair.second.toInt());
-                } else if (pair.first == REFRESH_TOKEN) {
-                    respData.setRefreshToken(pair.second);
-                } else if (pair.first == STATE) {
-                    state = pair.second;
-                } else if (pair.first == SCOPE) {
-                    respData.setScope(pair.second.split(' ', QString::SkipEmptyParts));
+        // Some providers (e.g. OneDrive and Outlook) implement non-standard
+        // OAuth2 flows and return auth code requiring exchange for token.
+        if (url.hasQueryItem(AUTH_CODE)) {
+            QString code = url.queryItemValue(AUTH_CODE);
+            QStringList scopes = d->m_oauth2Data.Scope();
+            QUrl newUrl;
+            newUrl.addQueryItem(GRANT_TYPE, AUTHORIZATION_CODE);
+            newUrl.addQueryItem(AUTH_CODE, code);
+            newUrl.addQueryItem(REDIRECT_URI, redirectUri);
+            if (!scopes.isEmpty())
+                newUrl.addQueryItem(SCOPE, QUrl::toPercentEncoding(scopes.join(" ")));
+            TRACE() << "USER_AGENT flow got auth code query item, sending auth code request:" << newUrl.toString();
+            sendOAuth2PostRequest(newUrl,
+                                  GrantType::AuthorizationCode);
+        } else {
+            // Response should contain the access token
+            OAuth2PluginTokenData respData;
+            if (url.hasFragment()) {
+                QString state;
+                respData.setScope(d->m_oauth2Data.Scope());
+                QUrlQuery fragment(url.fragment());
+                QVariantMap extraFields;
+                typedef QPair<QString, QString> StringPair;
+                Q_FOREACH(const StringPair &pair, fragment.queryItems()) {
+                    if (pair.first == ACCESS_TOKEN) {
+                        respData.setAccessToken(pair.second);
+                    } else if (pair.first == ID_TOKEN) {
+                        respData.setIdToken(pair.second);
+                    } else if (pair.first == EXPIRES_IN) {
+                        respData.setExpiresIn(pair.second.toInt());
+                    } else if (pair.first == REFRESH_TOKEN) {
+                        respData.setRefreshToken(pair.second);
+                    } else if (pair.first == STATE) {
+                        state = pair.second;
+                    } else if (pair.first == SCOPE) {
+                        respData.setScope(pair.second.split(' ', QString::SkipEmptyParts));
+                    } else {
+                        extraFields.insert(pair.first, pair.second);
+                    }
+                }
+                respData.setExtraFields(extraFields);
+                if (!d->m_oauth2Data.DisableStateParameter() &&
+                    state != d->m_state) {
+                    Q_EMIT error(Error(Error::NotAuthorized,
+                                       QString("'state' parameter mismatch")));
+                    return;
+                }
+
+                if (respData.AccessToken().isEmpty()) {
+                    emit error(Error(Error::NotAuthorized, QString("Access token not present")));
                 } else {
-                    extraFields.insert(pair.first, pair.second);
+                    storeResponse(respData);
+
+                    emit result(respData);
                 }
             }
-            respData.setExtraFields(extraFields);
-            if (!d->m_oauth2Data.DisableStateParameter() &&
-                state != d->m_state) {
-                Q_EMIT error(Error(Error::NotAuthorized,
-                                   QString("'state' parameter mismatch")));
-                return;
-            }
-
-            if (respData.AccessToken().isEmpty()) {
+            else {
                 emit error(Error(Error::NotAuthorized, QString("Access token not present")));
-            } else {
-                storeResponse(respData);
-
-                emit result(respData);
             }
         }
-        else {
-            emit error(Error(Error::NotAuthorized, QString("Access token not present")));
-        }
     } else if (d->m_mechanism == WEB_SERVER || d->m_mechanism == OAUTH2) {
         // Access grant can be one of the floolwing types
         // 1. Authorization code (code, redirect_uri)
@@ -472,7 +492,8 @@ void OAuth2Plugin::userActionFinished(const SignOn::UiSessionData &data)
             QString code = url.queryItemValue(AUTH_CODE);
             newUrl.addQueryItem(GRANT_TYPE, AUTHORIZATION_CODE);
             newUrl.addQueryItem(AUTH_CODE, code);
-            newUrl.addQueryItem(REDIRECT_URI, d->m_oauth2Data.RedirectUri());
+            newUrl.addQueryItem(REDIRECT_URI, redirectUri);
+            TRACE() << "WEB_SERVER flow got auth code query item, sending auth code request:" << newUrl.toString();
             sendOAuth2PostRequest(newUrl,
                                   GrantType::AuthorizationCode);
         }
